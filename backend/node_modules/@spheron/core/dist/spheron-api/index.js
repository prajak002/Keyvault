"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
class SpheronApi {
    constructor(token, url) {
        this.spheronApiUrl = "https://api-v2.spheron.network";
        this.token = token;
        if (url) {
            this.spheronApiUrl = url;
        }
    }
    getTokenScope() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendApiRequest(HttpMethods.GET, "/v1/api-keys/scope");
        });
    }
    getProject(projectId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.sendApiRequest(HttpMethods.GET, `/v1/project/${projectId}`);
        });
    }
    getProjectDeployments(projectId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (options.skip < 0 || options.limit < 0) {
                throw new Error(`Skip and Limit cannot be negative numbers.`);
            }
            const deployments = yield this.sendApiRequest(HttpMethods.GET, `/v1/project/${projectId}/deployments?skip=${options.skip}&limit=${options.limit}${options.status ? `&status=${options.status}` : ""}`);
            return { deployments };
        });
    }
    getProjectDomains(projectId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.sendApiRequest(HttpMethods.GET, `/v1/project/${projectId}/domains`);
        });
    }
    getProjectDomain(projectId, domainIdentifier) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.sendApiRequest(HttpMethods.GET, `/v1/project/${projectId}/domains/${domainIdentifier}`);
        });
    }
    addProjectDomain(projectId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendApiRequest(HttpMethods.POST, `/v1/project/${projectId}/domains`, options);
        });
    }
    patchProjectDomain(projectId, domainIdentifier, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendApiRequest(HttpMethods.PATCH, `/v1/project/${projectId}/domains/${domainIdentifier}`, options);
        });
    }
    verifyProjectDomain(projectId, domainIdentifier) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendApiRequest(HttpMethods.PATCH, `/v1/project/${projectId}/domains/${domainIdentifier}/verify`, {});
        });
    }
    deleteProjectDomain(projectId, domainIdentifier) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.sendApiRequest(HttpMethods.DELETE, `/v1/project/${projectId}/domains/${domainIdentifier}`);
        });
    }
    getProjectDeploymentCount(projectId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendApiRequest(HttpMethods.GET, `/v1/project/${projectId}/deployments/count`);
        });
    }
    updateProjectState(projectId, state) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendApiRequest(HttpMethods.PATCH, `/v1/project/${projectId}/state`, { state });
        });
    }
    updateProjectConfiguration(projectId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.sendApiRequest(HttpMethods.PUT, `/v1/project/${projectId}/configuration`, options);
        });
    }
    getDeployment(deploymentId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { deployment } = yield this.sendApiRequest(HttpMethods.GET, `/v1/deployment/${deploymentId}`);
            return deployment;
        });
    }
    createOrganization(username, name, appType) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = {
                username,
                name,
                appType,
            };
            const { organization } = yield this.sendApiRequest(HttpMethods.POST, `/v1/organization`, body);
            return organization;
        });
    }
    getOrganization(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const organization = yield this.sendApiRequest(HttpMethods.GET, `/v1/organization/${id}`);
            return organization;
        });
    }
    getOrganizationProjects(id, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (options.skip < 0 || options.limit < 0) {
                throw new Error(`Skip and Limit cannot be negative numbers.`);
            }
            const result = yield this.sendApiRequest(HttpMethods.GET, `/v1/organization/${id}/projects?skip=${options.skip}&limit=${options.limit}${options.state ? `&state=${options.state}` : ""}`);
            return result.projects;
        });
    }
    getProfile() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.sendApiRequest(HttpMethods.GET, `/v1/profile/`);
            return result.user;
        });
    }
    getDeploymentEnvironments(projectId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendApiRequest(HttpMethods.GET, `/v1/project/${projectId}/deployment-environments`);
            return response.result;
        });
    }
    verfiyGitToken(provider, code, port) {
        return __awaiter(this, void 0, void 0, function* () {
            const verifiedToken = yield this.sendApiRequest(HttpMethods.GET, `/auth/${provider}/cli/verify-token/${code}?port=${port}`);
            return verifiedToken;
        });
    }
    getOrganizationUsage(organizationId, specialization) {
        return __awaiter(this, void 0, void 0, function* () {
            const { usage } = yield this.sendApiRequest(HttpMethods.GET, `/v1/organization/${organizationId}/subscription-usage/specialization/${specialization}`);
            return usage;
        });
    }
    publishIPNS(deploymentId) {
        return __awaiter(this, void 0, void 0, function* () {
            const resp = yield this.sendApiRequest(HttpMethods.POST, `/v1/ipns/deployments/${deploymentId}/names`);
            return this.mapIPNSResponseToIPNSName(resp.ipnsName);
        });
    }
    updateIPNSName(ipnsNameId, deploymentId) {
        return __awaiter(this, void 0, void 0, function* () {
            const resp = yield this.sendApiRequest(HttpMethods.PUT, `/v1/ipns/deployments/${deploymentId}/names/${ipnsNameId}`);
            return this.mapIPNSResponseToIPNSName(resp.ipnsName);
        });
    }
    getIPNSName(ipnsNameId) {
        return __awaiter(this, void 0, void 0, function* () {
            const resp = yield this.sendApiRequest(HttpMethods.GET, `/v1/ipns/names/${ipnsNameId}`);
            return this.mapIPNSResponseToIPNSName(resp);
        });
    }
    getIPNSNamesForUpload(uploadId) {
        return __awaiter(this, void 0, void 0, function* () {
            const resp = yield this.sendApiRequest(HttpMethods.GET, `/v1/ipns/deployments/${uploadId}/names`);
            return resp.map((ipnsName) => this.mapIPNSResponseToIPNSName(ipnsName));
        });
    }
    getIPNSNamesForOrganization(organizationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const resp = yield this.sendApiRequest(HttpMethods.GET, `/v1/ipns/names`, {
                organizationId,
            });
            return resp.map((ipnsName) => this.mapIPNSResponseToIPNSName(ipnsName));
        });
    }
    sendApiRequest(method, path, payload) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield (0, axios_1.default)({
                    method,
                    url: `${this.spheronApiUrl}${path}`,
                    data: payload,
                    headers: {
                        Authorization: `Bearer ${this.token}`,
                    },
                });
                return response.data;
            }
            catch (error) {
                throw new Error(((_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.message) || (error === null || error === void 0 ? void 0 : error.message));
            }
        });
    }
    mapIPNSResponseToIPNSName(ipnsResponse) {
        return {
            id: ipnsResponse._id,
            publishedUploadId: ipnsResponse.publishedDeploymentId,
            organizationId: ipnsResponse.organizationId,
            createdAt: ipnsResponse.createdAt,
            updatedAt: ipnsResponse.updatedAt,
            ipnsHash: ipnsResponse.keyId,
            ipnsLink: ipnsResponse.ipnsLink,
        };
    }
}
var HttpMethods;
(function (HttpMethods) {
    HttpMethods["GET"] = "Get";
    HttpMethods["POST"] = "Post";
    HttpMethods["PATCH"] = "Patch";
    HttpMethods["DELETE"] = "Delete";
    HttpMethods["PUT"] = "Put";
})(HttpMethods || (HttpMethods = {}));
exports.default = SpheronApi;
